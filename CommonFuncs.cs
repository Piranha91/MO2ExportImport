using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls.Primitives;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace MO2ExportImport
{
    public class CommonFuncs
    {
        public static List<string> LoadModList(string filePath, bool reverseOrder = true)
        {
            if (!File.Exists(filePath))
            {
                return new List<string>();
            }

            var lines = File.ReadAllLines(filePath).Where(line => !line.StartsWith("#")).ToList();

            if (reverseOrder)
            {
                lines.Reverse(); // Reverse the list in place if needed
            }

            return lines;
        }

        public static bool SaveModList(string filePath, List<string> modList, out string exceptionStr)
        {
            // Reverse the ProfileModList back to original order before saving
            modList.Reverse();

            // Reinsert the special comment line at the beginning
            modList.Insert(0, "# This file was automatically generated by Mod Organizer.");

            // Save the edited mod list
            try
            {
                File.WriteAllLines(filePath, modList);
                exceptionStr = string.Empty;
                return true;
            }
            catch (Exception e)
            {
                exceptionStr = $"Could not save profile information at {filePath}. Error:" + Environment.NewLine + e.Message;
                return false;
            }
        }

        public static bool SavePluginList(string filePath, List<string> pluginList, out string exceptionStr)
        {
            pluginList.Insert(0, "# This file was automatically generated by Mod Organizer.");

            // Save the edited plugin lists
            try
            {
                File.WriteAllLines(filePath, pluginList);
                exceptionStr = string.Empty;
                return true;
            }
            catch (Exception e)
            {
                exceptionStr = $"Could not save profile information at {filePath}. Error:" + Environment.NewLine + e.Message;
                return false;
            }
        }


        public static List<string> LoadPluginList(string filePath, bool reverseOrder = false)
        {
            if (!File.Exists(filePath))
            {
                return new List<string>();
            }

            var lines = File.ReadAllLines(filePath).Where(line => !line.StartsWith("#")).ToList();

            if (reverseOrder)
            {
                lines.Reverse(); // Reverse the list in place if needed
            }

            return lines;
        }
    }
}
